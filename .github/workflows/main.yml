name: prod

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: "ghcr.io/${{ github.repository }}/${{ github.sha }}:latest"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      -
        name: Checking out repo
        uses: actions/checkout@v2
      -
        name: Run tests
        run: echo "Would run" #docker-compose run tests

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      -
        name: Checking out repo
        uses: actions/checkout@v2
      -
        name: Build
        run: |
            touch .env
            IMAGE_NAME="${IMAGE_NAME}" docker-compose -f docker-compose.prod.yml build web
      -
        name: Push
        run: |
             echo "${{ secrets.PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
             IMAGE_NAME="${IMAGE_NAME}" docker-compose -f docker-compose.prod.yml push

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      -
        name: Checking out repo
        uses: actions/checkout@v2
      -
        name: Set production environment variables
        run: |
            touch .env
            echo "DB_NAME=${{ secrets.DB_NAME}}" >> .env
            echo "DB_USER=${{ secrets.DB_USER}}" >> .env
            echo "DB_PASS=${{ secrets.DB_PASS}}" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASS}}" >> .env
      - name: Deploy production compose
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_KEY }}
          source: ".env, docker-compose.prod.yml"
          target: "~"
      - name: Run production container
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.PRODUCTION_HOST }}
          username: ${{ secrets.PRODUCTION_USER }}
          key: ${{ secrets.PRODUCTION_KEY }}
          envs: IMAGE_NAME
          script: |
                  echo "${{ secrets.PAT }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
                  docker image prune --force
                  IMAGE_NAME="${IMAGE_NAME}" docker compose -f docker-compose.prod.yml pull web
                  IMAGE_NAME="${IMAGE_NAME}" docker compose -f docker-compose.prod.yml up -d --no-recreate mysql
                  IMAGE_NAME="${IMAGE_NAME}" docker compose -f docker-compose.prod.yml up -d --no-deps web
